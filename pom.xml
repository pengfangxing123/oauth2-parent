<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.4.RELEASE</version>
    </parent>

    <groupId>com.oauth2</groupId>
    <artifactId>oauth2-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>


    <modules>
        <module>oauth2-client</module>
        <module>oauth2-authorization</module>
        <module>oauth2-resource</module>
        <module>oauth2-dao</module>
        <module>aouth2-common</module>
    </modules>

    <!-- 环境定义，默认dev -->
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <profileActive>dev</profileActive>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <profileActive>test</profileActive>
            </properties>
        </profile>
        <profile>
            <id>pre</id>
            <properties>
                <profileActive>pre</profileActive>
            </properties>
        </profile>
        <profile>
            <id>pro</id>
            <properties>
                <profileActive>pro</profileActive>
            </properties>
        </profile>
    </profiles>


    <!-- 公用属性定义 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>

        <spring-boot.version>2.0.5.RELEASE</spring-boot.version>
        <spring.security.oauth2>2.3.4.RELEASE</spring.security.oauth2>
        <mysql.version>5.1.46</mysql.version>
        <mybatis-plus-boot-starter.version>3.0.6</mybatis-plus-boot-starter.version>

        <maven.compiler.plugin.version>3.7.0</maven.compiler.plugin.version>
        <git.commit.id.plugin.version>2.2.5</git.commit.id.plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.security.oauth</groupId>
                <artifactId>spring-security-oauth2</artifactId>
                <version>${spring.security.oauth2}</version>
            </dependency>

            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus-boot-starter.version}</version>
            </dependency>

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
                <scope>runtime</scope>
            </dependency>
        </dependencies>

    </dependencyManagement>


    <build>
        <!--打包时默认的resources处理，子模块不用单独处理-->
        <!-- 默认4个环境
         dev 开发环境
         test 测试环境
         pre 预发布、灰度环境
         pro 生产环境
         -->
        <!-- 在打包时，根据-P 参数将 application-${profileActive}.properties 进行打包 -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>application-dev.properties</exclude>
                    <exclude>application-test.properties</exclude>
                    <exclude>application-pre.properties</exclude>
                    <exclude>application-pro.properties</exclude>
                    <exclude>application.properties</exclude>
                    <exclude>dev/*.xml</exclude>
                    <exclude>test/*.xml</exclude>
                    <exclude>pre/*.xml</exclude>
                    <exclude>pro/*.xml</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>application-${profileActive}.properties</include>
                    <include>application.properties</include>
                </includes>
            </resource>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources/${profileActive}</directory>
                <includes>
                    <include>*.xml</include>
                </includes>
            </resource>
        </resources>

        <!-- 统一插件管理 -->
        <pluginManagement>
            <plugins>
                <!-- 默认spring-boot-maven处理 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                    <configuration>
                        <!-- springboot 可执行jar包
                        可直接 sh ×.jar 运行jar包程序
                        -->
                        <executable>true</executable>
                    </configuration>
                    <executions>
                        <execution>
                            <!-- 主要是为了在spring boot admin 里显示编译打包相关信息 -->
                            <goals>
                                <goal>repackage</goal>
                                <goal>build-info</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- 默认编译处理 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                    </configuration>
                </plugin>

                <!-- 显示当前git分支、版本等信息，可在spring boot admin 查看 -->
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>${git.commit.id.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>get-the-git-infos</id>
                            <goals>
                                <goal>revision</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- 使properties扩展到整个maven bulid 周期
                        Ref: https://github.com/ktoso/maven-git-commit-id-plugin/issues/280 -->
                        <injectAllReactorProjects>true</injectAllReactorProjects>
                        <dateFormat>yyyy.MM.dd HH:mm:ss</dateFormat>
                        <verbose>true</verbose>
                        <!-- 是否生 git.properties 属性文件 -->
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <!--git描述配置,可选;由JGit提供实现;-->
                        <gitDescribe>
                            <!--是否生成描述属性-->
                            <skip>false</skip>
                            <!--提交操作未发现tag时,仅打印提交操作ID,-->
                            <always>false</always>
                            <!--提交操作ID显式字符长度,最大值为:40;默认值:7; 0代表特殊意义;后面有解释; -->
                            <abbrev>7</abbrev>
                            <!--构建触发时,代码有修改时(即"dirty state"),添加指定后缀;默认值:"";-->
                            <dirty>-dirty</dirty>
                            <!--always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag. The distance will always be 0 if you're "on" the tag. -->
                            <forceLongFormat>false</forceLongFormat>
                        </gitDescribe>
                    </configuration>
                </plugin>

                <!-- Maven内运行Ant任务的功能
                JRJ Jenkins 打包时要求jar包必须符合一定的目录要求才能正确打包到yum
                所以这里用了这个插件执行目录创建于jar包拷贝的工作
                 -->
                <!--<plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                    <executions>
                        <execution>
                            <phase>install</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <mkdir
                                            dir="${project.basedir}/classes/${project.artifactId}.jrj.local-${profileActive}"/>
                                    <copy
                                            file="${project.basedir}/target/${project.artifactId}-${project.version}.jar"
                                            tofile="${project.basedir}/classes/${project.artifactId}.jrj.local-${profileActive}/${project.artifactId}-${profileActive}-${project.version}.jar"/>
                                </target>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>-->

            </plugins>
        </pluginManagement>
    </build>
</project>